#!/usr/bin/env python3
"""
Ger√ßek Aƒü Sim√ºlat√∂r√º - Real Network Emulator
============================================

Bu mod√ºl, ger√ßek aƒü paketleri g√∂ndererek sim√ºlasyon yapar:
- Ger√ßek DNS sorgularƒ± g√∂nderir
- Ger√ßek HTTP istekleri g√∂nderir
- Ger√ßek IoT protokol paketleri g√∂nderir
- Ger√ßek saldƒ±rƒ± paketleri g√∂nderir (eƒüitim ama√ßlƒ±)

‚ö†Ô∏è UYARI: Bu ara√ß yalnƒ±zca eƒüitim ve test ama√ßlƒ±dƒ±r!
"""

import json
import time
import random
import threading
import socket
import struct
from datetime import datetime, timedelta
from collections import defaultdict, deque
from scapy.all import *
from scapy.layers.inet import IP, TCP, UDP, ICMP
from scapy.layers.dns import DNS, DNSQR, DNSRR
from scapy.layers.http import HTTP, HTTPRequest, HTTPResponse
from scapy.layers.l2 import Ether, ARP
import ipaddress
import requests

class RealNetworkSimulator:
    """Ger√ßek aƒü sim√ºlat√∂r√º sƒ±nƒ±fƒ±"""
    
    def __init__(self, config_file="simulation_config.json"):
        self.config = self.load_config(config_file)
        self.simulated_devices = {}
        self.traffic_patterns = defaultdict(list)
        self.network_topology = {}
        self.running = False
        self.simulation_threads = []
        self.packet_count = 0
        
        # Ger√ßek aƒü verilerini analiz etmek i√ßin
        self.real_network_analyzer = None
        
        # Aƒü aray√ºz√º
        self.interface = self.get_default_interface()
        
        print("üé≠ Ger√ßek Aƒü Sim√ºlat√∂r√º ba≈ülatƒ±ldƒ±")
        print(f"üìä Konfig√ºrasyon: {config_file}")
        print(f"üåê Aƒü Aray√ºz√º: {self.interface}")
    
    def get_default_interface(self):
        """Varsayƒ±lan aƒü aray√ºz√ºn√º bul"""
        try:
            # Sistem varsayƒ±lan aray√ºz√ºn√º bul
            import subprocess
            result = subprocess.run(['ip', 'route', 'show', 'default'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                for line in lines:
                    if 'default via' in line:
                        parts = line.split()
                        if len(parts) >= 5:
                            return parts[4]
        except:
            pass
        
        # Fallback: scapy ile bul
        try:
            return conf.iface
        except:
            return "eth0"  # Son √ßare
    
    def load_config(self, config_file):
        """Sim√ºlasyon konfig√ºrasyonunu y√ºkle"""
        default_config = {
            "simulation": {
                "duration": 3600,
                "device_count": 20,
                "traffic_intensity": "medium",
                "network_range": "192.168.100.0/24",
                "simulate_web_traffic": True,
                "simulate_iot_devices": True,
                "simulate_attacks": False,
                "real_packets": True
            },
            "devices": {
                "computers": 0.4,
                "mobiles": 0.3,
                "iot_devices": 0.2,
                "servers": 0.1
            },
            "traffic": {
                "dns_queries_per_minute": 50,
                "http_requests_per_minute": 30,
                "https_connections_per_minute": 20,
                "file_downloads_per_hour": 10
            },
            "attack_simulation": {
                "port_scan_attempts": 5,
                "brute_force_attempts": 3,
                "ddos_attempts": 2
            }
        }
        
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
                # Varsayƒ±lan deƒüerlerle birle≈ütir
                for key, value in default_config.items():
                    if key not in config:
                        config[key] = value
                return config
        except FileNotFoundError:
            print(f"‚ö†Ô∏è Konfig√ºrasyon dosyasƒ± bulunamadƒ±: {config_file}")
            print("üìù Varsayƒ±lan konfig√ºrasyon kullanƒ±lƒ±yor")
            return default_config
    
    def create_simulated_devices(self, real_data=None):
        """Sim√ºle edilecek cihazlarƒ± olu≈ütur"""
        print("üì± Sim√ºle edilecek cihazlar olu≈üturuluyor...")
        
        device_count = self.config['simulation']['device_count']
        network_range = self.config['simulation']['network_range']
        
        # Aƒü aralƒ±ƒüƒ±nƒ± parse et
        network = ipaddress.ip_network(network_range)
        available_ips = list(network.hosts())
        
        # Cihaz t√ºrleri
        device_types = self.config['devices']
        
        for i in range(device_count):
            if i >= len(available_ips):
                break
                
            ip = str(available_ips[i])
            
            # Cihaz t√ºr√ºn√º belirle
            device_type = self.select_device_type(device_types)
            
            # MAC adresi olu≈ütur
            mac = self.generate_mac_address(device_type)
            
            # Cihaz profili olu≈ütur
            device = {
                'ip': ip,
                'mac': mac,
                'device_type': device_type,
                'vendor': self.get_vendor_from_mac(mac),
                'os': self.get_os_for_device_type(device_type),
                'open_ports': self.get_ports_for_device_type(device_type),
                'traffic_pattern': self.get_traffic_pattern(device_type),
                'last_seen': datetime.now(),
                'is_active': True
            }
            
            # Ger√ßek verilerden √∂ƒürenilen davranƒ±≈ülarƒ± ekle
            if real_data and real_data.get('devices'):
                self.apply_real_behavior(device, real_data['devices'])
            
            self.simulated_devices[ip] = device
        
        print(f"‚úÖ {len(self.simulated_devices)} cihaz olu≈üturuldu")
    
    def select_device_type(self, device_types):
        """Cihaz t√ºr√ºn√º olasƒ±lƒ±ƒüa g√∂re se√ß"""
        rand = random.random()
        cumulative = 0
        
        for device_type, probability in device_types.items():
            cumulative += probability
            if rand <= cumulative:
                return device_type
        
        return 'computers'
    
    def generate_mac_address(self, device_type):
        """Cihaz t√ºr√ºne g√∂re MAC adresi olu≈ütur"""
        oui_map = {
            'computers': ['00:1B:21', '00:50:56', '08:00:27'],
            'mobiles': ['00:1B:44', '00:1C:42', '00:1D:4F'],
            'iot_devices': ['00:15:B7', '00:16:3E', '00:17:42'],
            'servers': ['00:0C:29', '00:0F:4B', '00:11:22']
        }
        
        oui = random.choice(oui_map.get(device_type, oui_map['computers']))
        mac_suffix = ':'.join([f"{random.randint(0, 255):02X}" for _ in range(3)])
        
        return f"{oui}:{mac_suffix}"
    
    def get_vendor_from_mac(self, mac):
        """MAC adresinden vendor bilgisi al"""
        oui = mac[:8].upper()
        
        oui_database = {
            '00:1B:21': 'Apple Inc.',
            '00:50:56': 'VMware, Inc.',
            '08:00:27': 'Oracle VirtualBox',
            '00:1B:44': 'Apple Inc.',
            '00:1C:42': 'Apple Inc.',
            '00:15:B7': 'Cisco Systems',
            '00:16:3E': 'Cisco Systems',
            '00:0C:29': 'VMware, Inc.',
            '00:0F:4B': 'Cisco Systems',
            '00:11:22': 'Dell Inc.'
        }
        
        return oui_database.get(oui, 'Unknown Vendor')
    
    def get_os_for_device_type(self, device_type):
        """Cihaz t√ºr√ºne g√∂re i≈ületim sistemi"""
        os_map = {
            'computers': ['Windows 10', 'Windows 11', 'macOS 13.0', 'Ubuntu 22.04'],
            'mobiles': ['iOS 16.0', 'Android 13', 'Android 12'],
            'iot_devices': ['Embedded Linux', 'FreeRTOS', 'Custom Firmware'],
            'servers': ['Ubuntu Server 22.04', 'CentOS 8', 'Windows Server 2022']
        }
        
        return random.choice(os_map.get(device_type, os_map['computers']))
    
    def get_ports_for_device_type(self, device_type):
        """Cihaz t√ºr√ºne g√∂re a√ßƒ±k portlar"""
        port_map = {
            'computers': [
                {'port': 22, 'service': 'ssh'},
                {'port': 80, 'service': 'http'},
                {'port': 443, 'service': 'https'},
                {'port': 3389, 'service': 'rdp'}
            ],
            'mobiles': [
                {'port': 443, 'service': 'https'},
                {'port': 80, 'service': 'http'}
            ],
            'iot_devices': [
                {'port': 80, 'service': 'http'},
                {'port': 443, 'service': 'https'},
                {'port': 1883, 'service': 'mqtt'},
                {'port': 5683, 'service': 'coap'}
            ],
            'servers': [
                {'port': 22, 'service': 'ssh'},
                {'port': 80, 'service': 'http'},
                {'port': 443, 'service': 'https'},
                {'port': 21, 'service': 'ftp'},
                {'port': 25, 'service': 'smtp'},
                {'port': 53, 'service': 'dns'}
            ]
        }
        
        ports = port_map.get(device_type, port_map['computers'])
        return random.sample(ports, random.randint(1, len(ports)))
    
    def get_traffic_pattern(self, device_type):
        """Cihaz t√ºr√ºne g√∂re trafik deseni"""
        patterns = {
            'computers': {
                'dns_queries_per_hour': 100,
                'http_requests_per_hour': 200,
                'file_downloads_per_hour': 5,
                'active_hours': [9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21]
            },
            'mobiles': {
                'dns_queries_per_hour': 150,
                'http_requests_per_hour': 300,
                'file_downloads_per_hour': 10,
                'active_hours': list(range(24))
            },
            'iot_devices': {
                'dns_queries_per_hour': 20,
                'http_requests_per_hour': 50,
                'file_downloads_per_hour': 1,
                'active_hours': list(range(24))
            },
            'servers': {
                'dns_queries_per_hour': 500,
                'http_requests_per_hour': 1000,
                'file_downloads_per_hour': 20,
                'active_hours': list(range(24))
            }
        }
        
        return patterns.get(device_type, patterns['computers'])
    
    def apply_real_behavior(self, device, real_devices):
        """Ger√ßek cihaz davranƒ±≈ülarƒ±nƒ± sim√ºle edilen cihaza uygula"""
        similar_devices = [d for d in real_devices if d.get('device_type') == device['device_type']]
        
        if similar_devices:
            real_device = random.choice(similar_devices)
            
            if 'traffic_pattern' in real_device:
                device['traffic_pattern'].update(real_device['traffic_pattern'])
            
            if 'open_ports' in real_device:
                device['open_ports'] = real_device['open_ports']
    
    def start_simulation(self, real_network_range=None):
        """Sim√ºlasyonu ba≈ülat"""
        print("üöÄ Ger√ßek aƒü sim√ºlasyonu ba≈ülatƒ±lƒ±yor...")
        
        # Ger√ßek aƒü analizi (isteƒüe baƒülƒ±)
        real_data = None
        if real_network_range:
            real_data = self.analyze_real_network(real_network_range)
        
        # Sim√ºle edilecek cihazlarƒ± olu≈ütur
        self.create_simulated_devices(real_data)
        
        # Sim√ºlasyon thread'lerini ba≈ülat
        self.running = True
        
        # DNS trafiƒüi sim√ºlasyonu
        dns_thread = threading.Thread(target=self.simulate_dns_traffic)
        dns_thread.daemon = True
        dns_thread.start()
        self.simulation_threads.append(dns_thread)
        
        # HTTP trafiƒüi sim√ºlasyonu
        http_thread = threading.Thread(target=self.simulate_http_traffic)
        http_thread.daemon = True
        http_thread.start()
        self.simulation_threads.append(http_thread)
        
        # IoT cihaz trafiƒüi sim√ºlasyonu
        iot_thread = threading.Thread(target=self.simulate_iot_traffic)
        iot_thread.daemon = True
        iot_thread.start()
        self.simulation_threads.append(iot_thread)
        
        # Saldƒ±rƒ± sim√ºlasyonu (isteƒüe baƒülƒ±)
        if self.config['simulation']['simulate_attacks']:
            attack_thread = threading.Thread(target=self.simulate_attacks)
            attack_thread.daemon = True
            attack_thread.start()
            self.simulation_threads.append(attack_thread)
        
        print("‚úÖ Ger√ßek sim√ºlasyon ba≈ülatƒ±ldƒ±")
        print(f"üìä {len(self.simulated_devices)} cihaz sim√ºle ediliyor")
        print(f"‚è±Ô∏è S√ºre: {self.config['simulation']['duration']} saniye")
    
    def analyze_real_network(self, network_range="192.168.1.0/24", duration=300):
        """Ger√ßek aƒüƒ± analiz et ve verileri topla"""
        print("üîç Ger√ßek aƒü analizi ba≈ülatƒ±lƒ±yor...")
        
        try:
            from real_network_scanner import RealNetworkScanner
            scanner = RealNetworkScanner()
            devices = scanner.scan_network(network_range)
            
            from real_topology_mapper import RealTopologyMapper
            mapper = RealTopologyMapper()
            topology = mapper.analyze_network_topology(network_range)
            
            from real_time_web_monitor import RealTimeWebMonitor
            monitor = RealTimeWebMonitor()
            monitor.start_monitoring("auto", duration)
            
            print("‚úÖ Ger√ßek aƒü analizi tamamlandƒ±")
            return {
                'devices': devices,
                'topology': topology,
                'web_activity': monitor.get_activity_data()
            }
            
        except Exception as e:
            print(f"‚ùå Ger√ßek aƒü analizi hatasƒ±: {e}")
            return None
    
    def simulate_dns_traffic(self):
        """Ger√ßek DNS trafiƒüini sim√ºle et"""
        print("üåê Ger√ßek DNS trafiƒüi sim√ºlasyonu ba≈ülatƒ±ldƒ±")
        
        common_domains = [
            'google.com', 'facebook.com', 'youtube.com', 'twitter.com',
            'instagram.com', 'netflix.com', 'amazon.com', 'github.com',
            'stackoverflow.com', 'reddit.com', 'wikipedia.org', 'cnn.com',
            'bbc.com', 'yahoo.com', 'bing.com', 'linkedin.com'
        ]
        
        while self.running:
            for device_ip, device in self.simulated_devices.items():
                if not device['is_active']:
                    continue
                
                current_hour = datetime.now().hour
                if current_hour not in device['traffic_pattern']['active_hours']:
                    continue
                
                if random.random() < 0.1:
                    domain = random.choice(common_domains)
                    self.send_real_dns_query(device_ip, domain)
            
            time.sleep(1)
    
    def simulate_http_traffic(self):
        """Ger√ßek HTTP trafiƒüini sim√ºle et"""
        print("üåç Ger√ßek HTTP trafiƒüi sim√ºlasyonu ba≈ülatƒ±ldƒ±")
        
        while self.running:
            for device_ip, device in self.simulated_devices.items():
                if not device['is_active']:
                    continue
                
                current_hour = datetime.now().hour
                if current_hour not in device['traffic_pattern']['active_hours']:
                    continue
                
                if random.random() < 0.05:
                    self.send_real_http_request(device_ip)
            
            time.sleep(2)
    
    def simulate_iot_traffic(self):
        """Ger√ßek IoT cihaz trafiƒüini sim√ºle et"""
        print("üè† Ger√ßek IoT cihaz trafiƒüi sim√ºlasyonu ba≈ülatƒ±ldƒ±")
        
        while self.running:
            for device_ip, device in self.simulated_devices.items():
                if device['device_type'] != 'iot_devices' or not device['is_active']:
                    continue
                
                if random.random() < 0.2:
                    self.send_real_iot_data(device_ip, device)
            
            time.sleep(5)
    
    def simulate_attacks(self):
        """Ger√ßek saldƒ±rƒ± sim√ºlasyonu (eƒüitim ama√ßlƒ±)"""
        print("‚ö†Ô∏è Ger√ßek saldƒ±rƒ± sim√ºlasyonu ba≈ülatƒ±ldƒ± (eƒüitim ama√ßlƒ±)")
        
        while self.running:
            if random.random() < 0.01:
                self.simulate_real_port_scan()
            
            if random.random() < 0.005:
                self.simulate_real_brute_force()
            
            time.sleep(10)
    
    def send_real_dns_query(self, src_ip, domain):
        """Ger√ßek DNS sorgusu g√∂nder"""
        try:
            # Ger√ßek DNS sorgu paketi olu≈ütur
            dns_query = DNS(rd=1, qd=DNSQR(qname=domain))
            packet = IP(src=src_ip, dst="8.8.8.8") / UDP(dport=53) / dns_query
            
            # Ger√ßek paketi g√∂nder
            send(packet, verbose=0)
            
            timestamp = datetime.now().strftime("%H:%M:%S")
            print(f"üåê [{timestamp}] GER√áEK DNS: {src_ip} -> {domain}")
            
            self.packet_count += 1
            
            # Trafik desenini kaydet
            self.traffic_patterns[src_ip].append({
                'type': 'real_dns_query',
                'domain': domain,
                'timestamp': timestamp,
                'packet_sent': True
            })
            
        except Exception as e:
            print(f"‚ùå Ger√ßek DNS sorgu hatasƒ±: {e}")
    
    def send_real_http_request(self, src_ip):
        """Ger√ßek HTTP isteƒüi g√∂nder"""
        try:
            # Ger√ßek HTTP isteƒüi paketi olu≈ütur
            http_request = HTTPRequest(
                Host="httpbin.org",
                User_Agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            )
            packet = IP(src=src_ip, dst="54.166.163.67") / TCP(dport=80) / http_request
            
            # Ger√ßek paketi g√∂nder
            send(packet, verbose=0)
            
            timestamp = datetime.now().strftime("%H:%M:%S")
            print(f"üåç [{timestamp}] GER√áEK HTTP: {src_ip} -> httpbin.org")
            
            self.packet_count += 1
            
            # Trafik desenini kaydet
            self.traffic_patterns[src_ip].append({
                'type': 'real_http_request',
                'host': 'httpbin.org',
                'timestamp': timestamp,
                'packet_sent': True
            })
            
        except Exception as e:
            print(f"‚ùå Ger√ßek HTTP istek hatasƒ±: {e}")
    
    def send_real_iot_data(self, src_ip, device):
        """Ger√ßek IoT cihaz verisi g√∂nder"""
        try:
            # IoT protokol√º sim√ºle et (MQTT benzeri)
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            data_types = {
                'sensor': ['temperature', 'humidity', 'pressure'],
                'camera': ['motion_detected', 'image_captured'],
                'smart_home': ['light_on', 'door_opened', 'alarm_triggered']
            }
            
            device_category = random.choice(list(data_types.keys()))
            data_type = random.choice(data_types[device_category])
            
            # MQTT benzeri paket olu≈ütur
            mqtt_packet = IP(src=src_ip, dst="192.168.100.1") / UDP(dport=1883) / Raw(load=f"MQTT_DATA:{data_type}:{random.uniform(20, 30):.1f}")
            
            # Ger√ßek paketi g√∂nder
            send(mqtt_packet, verbose=0)
            
            print(f"üè† [{timestamp}] GER√áEK IoT: {src_ip} -> {data_type}")
            
            self.packet_count += 1
            
            # Trafik desenini kaydet
            self.traffic_patterns[src_ip].append({
                'type': 'real_iot_data',
                'data_type': data_type,
                'device_category': device_category,
                'timestamp': timestamp,
                'packet_sent': True
            })
            
        except Exception as e:
            print(f"‚ùå Ger√ßek IoT veri hatasƒ±: {e}")
    
    def simulate_real_port_scan(self):
        """Ger√ßek port tarama sim√ºlasyonu"""
        try:
            target_ip = random.choice(list(self.simulated_devices.keys()))
            ports_to_scan = random.sample(range(1, 1024), 10)
            
            timestamp = datetime.now().strftime("%H:%M:%S")
            print(f"üîç [{timestamp}] GER√áEK Port Tarama: {target_ip} -> {ports_to_scan}")
            
            # Ger√ßek SYN paketleri g√∂nder
            for port in ports_to_scan:
                syn_packet = IP(src="192.168.100.254", dst=target_ip) / TCP(dport=port, flags="S")
                send(syn_packet, verbose=0)
                self.packet_count += 1
                time.sleep(0.1)  # Rate limiting
            
            # Saldƒ±rƒ± desenini kaydet
            self.traffic_patterns['attacker'].append({
                'type': 'real_port_scan',
                'target': target_ip,
                'ports': ports_to_scan,
                'timestamp': timestamp,
                'packets_sent': len(ports_to_scan)
            })
            
        except Exception as e:
            print(f"‚ùå Ger√ßek port tarama hatasƒ±: {e}")
    
    def simulate_real_brute_force(self):
        """Ger√ßek brute force saldƒ±rƒ±sƒ± sim√ºlasyonu"""
        try:
            target_ip = random.choice(list(self.simulated_devices.keys()))
            
            usernames = ['admin', 'root', 'user', 'guest']
            passwords = ['123456', 'password', 'admin', '12345']
            
            username = random.choice(usernames)
            password = random.choice(passwords)
            
            timestamp = datetime.now().strftime("%H:%M:%S")
            print(f"üîê [{timestamp}] GER√áEK Brute Force: {target_ip} -> {username}:{password}")
            
            # Ger√ßek SSH baƒülantƒ± denemesi paketi
            ssh_packet = IP(src="192.168.100.254", dst=target_ip) / TCP(dport=22, flags="S")
            send(ssh_packet, verbose=0)
            self.packet_count += 1
            
            # Saldƒ±rƒ± desenini kaydet
            self.traffic_patterns['attacker'].append({
                'type': 'real_brute_force',
                'target': target_ip,
                'username': username,
                'password': password,
                'timestamp': timestamp,
                'packet_sent': True
            })
            
        except Exception as e:
            print(f"‚ùå Ger√ßek brute force hatasƒ±: {e}")
    
    def stop_simulation(self):
        """Sim√ºlasyonu durdur"""
        print("‚èπÔ∏è Ger√ßek sim√ºlasyon durduruluyor...")
        self.running = False
        
        for thread in self.simulation_threads:
            thread.join(timeout=5)
        
        print("‚úÖ Ger√ßek sim√ºlasyon durduruldu")
        print(f"üìä Toplam g√∂nderilen paket: {self.packet_count}")
    
    def generate_simulation_report(self, output_file="real_simulation_report.json"):
        """Sim√ºlasyon raporu olu≈ütur"""
        print("üìä Ger√ßek sim√ºlasyon raporu olu≈üturuluyor...")
        
        report = {
            'simulation_info': {
                'start_time': datetime.now().isoformat(),
                'duration': self.config['simulation']['duration'],
                'device_count': len(self.simulated_devices),
                'network_range': self.config['simulation']['network_range'],
                'total_packets_sent': self.packet_count,
                'real_packets': True
            },
            'simulated_devices': self.simulated_devices,
            'traffic_patterns': dict(self.traffic_patterns),
            'statistics': self.calculate_statistics()
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Ger√ßek sim√ºlasyon raporu kaydedildi: {output_file}")
        return report
    
    def calculate_statistics(self):
        """Sim√ºlasyon istatistiklerini hesapla"""
        stats = {
            'total_devices': len(self.simulated_devices),
            'device_types': defaultdict(int),
            'total_traffic_events': 0,
            'traffic_by_type': defaultdict(int),
            'active_devices': 0,
            'real_packets_sent': self.packet_count
        }
        
        for device in self.simulated_devices.values():
            stats['device_types'][device['device_type']] += 1
            if device['is_active']:
                stats['active_devices'] += 1
        
        for ip, events in self.traffic_patterns.items():
            stats['total_traffic_events'] += len(events)
            for event in events:
                stats['traffic_by_type'][event['type']] += 1
        
        return dict(stats)
    
    def print_simulation_summary(self):
        """Sim√ºlasyon √∂zetini yazdƒ±r"""
        print("\n" + "="*60)
        print("üé≠ GER√áEK Aƒû Sƒ∞M√úLASYONU √ñZETƒ∞")
        print("="*60)
        
        print(f"üì± Toplam Cihaz: {len(self.simulated_devices)}")
        print(f"üåê Aƒü Aralƒ±ƒüƒ±: {self.config['simulation']['network_range']}")
        print(f"‚è±Ô∏è Sim√ºlasyon S√ºresi: {self.config['simulation']['duration']} saniye")
        print(f"üì¶ Toplam G√∂nderilen Paket: {self.packet_count}")
        
        # Cihaz t√ºr√º daƒüƒ±lƒ±mƒ±
        print("\nüìä Cihaz T√ºr√º Daƒüƒ±lƒ±mƒ±:")
        device_types = defaultdict(int)
        for device in self.simulated_devices.values():
            device_types[device['device_type']] += 1
        
        for device_type, count in device_types.items():
            percentage = (count / len(self.simulated_devices)) * 100
            print(f"   {device_type}: {count} (%{percentage:.1f})")
        
        # Trafik istatistikleri
        print("\nüåê Ger√ßek Trafik ƒ∞statistikleri:")
        total_events = sum(len(events) for events in self.traffic_patterns.values())
        print(f"   Toplam Trafik Olayƒ±: {total_events}")
        print(f"   Ger√ßek Paket G√∂nderildi: {self.packet_count}")
        
        traffic_by_type = defaultdict(int)
        for events in self.traffic_patterns.values():
            for event in events:
                traffic_by_type[event['type']] += 1
        
        for event_type, count in traffic_by_type.items():
            print(f"   {event_type}: {count}")
        
        print("="*60)


def main():
    """Ana fonksiyon"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="Ger√ßek Aƒü Sim√ºlat√∂r√º - Real Network Emulator",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
√ñrnek Kullanƒ±m:
  sudo python3 real_network_simulator.py --config simulation_config.json
  sudo python3 real_network_simulator.py --analyze-real 192.168.1.0/24
  sudo python3 real_network_simulator.py --duration 1800 --devices 50

‚ö†Ô∏è  UYARI: Bu ara√ß yalnƒ±zca eƒüitim ama√ßlƒ±dƒ±r!
   Ger√ßek paketler g√∂nderir - dikkatli kullanƒ±n!
        """
    )
    
    parser.add_argument('--config', '-c', default='simulation_config.json',
                       help='Sim√ºlasyon konfig√ºrasyon dosyasƒ±')
    parser.add_argument('--analyze-real', '-a', 
                       help='Ger√ßek aƒüƒ± analiz et (√∂rn: 192.168.1.0/24)')
    parser.add_argument('--duration', '-d', type=int,
                       help='Sim√ºlasyon s√ºresi (saniye)')
    parser.add_argument('--devices', '-n', type=int,
                       help='Sim√ºle edilecek cihaz sayƒ±sƒ±')
    parser.add_argument('--output', '-o', default='real_simulation_report.json',
                       help='√áƒ±ktƒ± dosyasƒ±')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Detaylƒ± √ßƒ±ktƒ±')
    
    args = parser.parse_args()
    
    print("üé≠ Ger√ßek Aƒü Sim√ºlat√∂r√º - Real Network Emulator")
    print("=" * 60)
    print("‚ö†Ô∏è  UYARI: Bu ara√ß yalnƒ±zca eƒüitim ama√ßlƒ±dƒ±r!")
    print("   GER√áEK PAKETLER G√ñNDERƒ∞R - dikkatli kullanƒ±n!")
    print("   Yalnƒ±zca test ortamlarƒ±nda kullanƒ±n.")
    print("=" * 60)
    
    # Sim√ºlat√∂r√º olu≈ütur
    simulator = RealNetworkSimulator(args.config)
    
    # Komut satƒ±rƒ± parametrelerini uygula
    if args.duration:
        simulator.config['simulation']['duration'] = args.duration
    if args.devices:
        simulator.config['simulation']['device_count'] = args.devices
    
    try:
        # Sim√ºlasyonu ba≈ülat
        simulator.start_simulation(args.analyze_real)
        
        # Sim√ºlasyon s√ºresini bekle
        duration = simulator.config['simulation']['duration']
        print(f"‚è±Ô∏è Sim√ºlasyon {duration} saniye √ßalƒ±≈üacak...")
        
        time.sleep(duration)
        
        # Sim√ºlasyonu durdur
        simulator.stop_simulation()
        
        # Rapor olu≈ütur
        report = simulator.generate_simulation_report(args.output)
        
        # √ñzet yazdƒ±r
        simulator.print_simulation_summary()
        
        print(f"\n‚úÖ Ger√ßek sim√ºlasyon tamamlandƒ±!")
        print(f"üìä Rapor: {args.output}")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Sim√ºlasyon kullanƒ±cƒ± tarafƒ±ndan durduruldu")
        simulator.stop_simulation()
    except Exception as e:
        print(f"‚ùå Sim√ºlasyon hatasƒ±: {e}")
        simulator.stop_simulation()


if __name__ == "__main__":
    main()



